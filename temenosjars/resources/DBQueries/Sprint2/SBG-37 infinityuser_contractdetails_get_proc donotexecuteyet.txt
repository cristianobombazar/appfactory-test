USE `dbxdb`;
DROP procedure IF EXISTS `infinityuser_contractdetails_get_proc`;

DELIMITER $$
USE `dbxdb`$$
CREATE DEFINER=`readwrite`@`%` PROCEDURE `infinityuser_contractdetails_get_proc`(
in _id varchar(50) CHARACTER SET UTF8 COLLATE utf8_general_ci
)
BEGIN
	select
		contract.id AS contractId,
        contract.name AS contractName,
        contract.servicedefinitionId AS servicedefinitionId,
        servicedefinition.name AS serviceDefinitionName,
        membergrouptype.description AS serviceDefinitionType,
        contractcorecustomers.coreCustomerId AS coreCustomerId,
        contractcorecustomers.coreCustomerName AS coreCustomerName,
        contractcorecustomers.taxId AS taxId,
		contractcorecustomers.isPrimary AS isPrimary,
        address.addressLine1 AS addressLine1,
        address.addressLine2 AS addressLine2,
        address.cityName AS cityName,
        address.state AS state,
        address.country AS country,
        address.zipCode AS zipCode,
        customergroup.Group_id AS userRole,
        membergroup.name AS userRoleName,
        membergroup.Description AS userRoleDescription,
        "true" AS isAssociated
	FROM
		contract
        LEFT JOIN servicedefinition ON (servicedefinition.id = contract.servicedefinitionId)
        LEFT JOIN membergrouptype ON (membergrouptype.id = servicedefinition.serviceType)
        LEFT JOIN contractcorecustomers ON (contractcorecustomers.contractId = contract.id)
        LEFT JOIN customergroup ON ( customergroup.contractId = contract.id AND customergroup.coreCustomerId = contractcorecustomers.coreCustomerId)
        LEFT JOIN membergroup ON (membergroup.id = customergroup.Group_id)
        LEFT JOIN contractcustomers ON (contractcustomers.contractId = contractcorecustomers.contractId)
        LEFT JOIN contractaddress ON (contractaddress.contractId = contract.id)
        LEFT JOIN address ON (address.id = contractaddress.addressId)
	WHERE
		customergroup.Customer_id = _id
        AND contractcustomers.customerId = _id
	UNION
    select
		contract.id AS contractId,
        contract.name AS contractName,
        contract.servicedefinitionId AS servicedefinitionId,
        servicedefinition.name AS serviceDefinitionName,
        membergrouptype.description AS serviceDefinitionType,
        contractcorecustomers.coreCustomerId AS coreCustomerId,
        contractcorecustomers.coreCustomerName AS coreCustomerName,
        contractcorecustomers.taxId AS taxId,
		contractcorecustomers.isPrimary AS isPrimary,
        address.addressLine1 AS addressLine1,
        address.addressLine2 AS addressLine2,
        address.cityName AS cityName,
        address.state AS state,
        address.country AS country,
        address.zipCode AS zipCode,
        NULL AS userRole,
        NULL AS userRoleName,
        NULL AS userRoleDescription,
        "false" AS isAssociated
	FROM
		contract
        LEFT JOIN servicedefinition ON (servicedefinition.id = contract.servicedefinitionId)
        LEFT JOIN membergrouptype ON (membergrouptype.id = servicedefinition.serviceType)
        LEFT JOIN contractcorecustomers ON (contractcorecustomers.contractId = contract.id)
		LEFT JOIN contractaddress ON (contractaddress.contractId = contract.id)
        LEFT JOIN address ON (address.id = contractaddress.addressId)

	WHERE
		contractcorecustomers.contractId IN ( select contractcustomers.contractId FROM contractcustomers WHERE contractcustomers.customerId = _id);
END$$

DELIMITER ;

