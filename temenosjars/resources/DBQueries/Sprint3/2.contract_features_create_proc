CREATE DEFINER=`readwrite`@`%` PROCEDURE `contract_features_create_proc`(
IN _features MEDIUMTEXT CHARACTER SET UTF8 COLLATE utf8_general_ci, 
IN _contractId VARCHAR(50) CHARACTER SET UTF8 COLLATE utf8_general_ci,
IN _customerId VARCHAR(50) CHARACTER SET UTF8 COLLATE utf8_general_ci,
IN _serviceTypeId VARCHAR(50) CHARACTER SET UTF8 COLLATE utf8_general_ci,
IN _defaultActionsEnabled VARCHAR(50) CHARACTER SET UTF8 COLLATE utf8_general_ci
)
BEGIN
 DECLARE finished INTEGER DEFAULT 0;
 DECLARE featureId varchar(255) DEFAULT "";
 DECLARE featuresList TEXT DEFAULT "";
 DECLARE featureActionId varchar(255) DEFAULT "" ;
 DECLARE entryStatus INTEGER DEFAULT 0 ;
 DECLARE limitId varchar(255) DEFAULT "";
 DECLARE tempLimitValue varchar(255) DEFAULT "";

 DECLARE features CURSOR 
		FOR (select id from feature where FIND_IN_SET(id COLLATE utf8_general_ci,@features_list COLLATE utf8_general_ci) and feature.softdeleteflag = 0);
DECLARE actions CURSOR 
		FOR (select id from featureaction where FIND_IN_SET(featureaction.id COLLATE utf8_general_ci,@validServicedefinitionActions COLLATE utf8_general_ci));
 DECLARE limits CURSOR 
		FOR (select LimitType_id from actionlimit where actionlimit.Action_id COLLATE utf8_general_ci = featureActionId COLLATE utf8_general_ci);
 DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
        
 SET SESSION group_concat_max_len = 100000000;
 
SET @features_list = (select group_concat(feature.id SEPARATOR ",") from feature JOIN featureroletype ON (featureroletype.Feature_id =feature.id  and featureroletype.RoleType_id = _serviceTypeId) 
                      where (FIND_IN_SET(feature.id COLLATE utf8_general_ci,_features COLLATE utf8_general_ci))  and feature.softdeleteflag = 0) ; 
SET @features_list = IF(@features_list is null, '', @features_list);

OPEN features; 
 getFeature: LOOP
        FETCH features INTO featureId;
        IF finished = 1 THEN 
            LEAVE getFeature;
	    else
            SET @id = (SELECT LEFT(UUID(), 50));
			INSERT INTO contractfeatures(id,contractId,coreCustomerId,featureId) VALUES
		    (@id,_contractId,_customerId,featureId);
			set featuresList = CONCAT(featureId,",",featuresList);
			ITERATE  getFeature;
        END IF;
END LOOP getFeature;
CLOSE features;
  
SET featuresList = (select SUBSTRING(featuresList FROM 1 FOR (CHAR_LENGTH(featuresList)-1)));
select featuresList;

SET finished = 0;

SET @validFIActions = (SELECT group_concat(distinct featureaction.id SEPARATOR ",") FROM featureaction WHERE
                        FIND_IN_SET(featureaction.Feature_id COLLATE utf8_general_ci,featuresList COLLATE utf8_general_ci) AND
                        featureaction.status = 'SID_ACTION_ACTIVE');

SET @servicedefinitionId = (SELECT servicedefinitionId from contract WHERE id  = _contractId);

SET @validServicedefinitionActions = (SELECT group_concat(distinct servicedefinitionactionlimit.actionId SEPARATOR ",") FROM servicedefinitionactionlimit WHERE
                                    servicedefinitionactionlimit.serviceDefinitionId = @servicedefinitionId AND
                                    FIND_IN_SET(servicedefinitionactionlimit.actionId COLLATE utf8_general_ci,@validFIActions COLLATE utf8_general_ci));
                                    
If !ISNULL(_defaultActionsEnabled) AND _defaultActionsEnabled = 'true' THEN

OPEN actions; 
getAction: LOOP
        SET entryStatus = 0;
        FETCH actions INTO featureActionId;
        SET @featureId = (SELECT Feature_id FROM featureaction WHERE id COLLATE utf8_general_ci = featureActionId COLLATE utf8_general_ci);
        IF finished = 1 THEN 
            LEAVE getAction;
	    else
            OPEN limits; 
			getlimit: LOOP
            FETCH limits INTO limitId;
			IF finished = 1 THEN 
               LEAVE getlimit;
			else
               
               SET @limitvalue = (SELECT value FROM actionlimit WHERE Action_id COLLATE utf8_general_ci = featureActionId COLLATE utf8_general_ci 
               AND LimitType_id COLLATE utf8_general_ci = limitId COLLATE utf8_general_ci);
			   SET @limitATServiceDefinition = (SELECT servicedefinitionactionlimit.value FROM servicedefinitionactionlimit WHERE 
                                                  servicedefinitionactionlimit.actionId COLLATE utf8_general_ci = featureActionId COLLATE utf8_general_ci AND
                                                  servicedefinitionactionlimit.limitTypeId COLLATE utf8_general_ci = limitId COLLATE utf8_general_ci AND
                                                   servicedefinitionactionlimit.serviceDefinitionId COLLATE utf8_general_ci = @servicedefinitionId COLLATE utf8_general_ci);
			  SET tempLimitValue = LEAST(@limitvalue,@limitATServiceDefinition);
              
              if(!isnull(tempLimitValue) AND tempLimitValue !='') THEN
                 SET @limitvalue = tempLimitValue;
              END IF;
				
			   SET @id = (SELECT LEFT(UUID(), 50));
               INSERT IGNORE INTO contractactionlimit(id,contractId,coreCustomerId,contractactionlimit.featureId,actionId,limitTypeId,value) VALUES
		        (@id,_contractId,_customerId,@featureId,featureActionId,limitId,@limitvalue);
                
                SET entryStatus = 1;
			   ITERATE  getlimit;
			END IF;
                END LOOP getlimit;
                CLOSE limits;
                
            SET finished = 0;
            IF entryStatus = 0 THEN
                SET @id = (SELECT LEFT(UUID(), 50));
                INSERT IGNORE INTO contractactionlimit(id,contractId,coreCustomerId,contractactionlimit.featureId,actionId) VALUES
		        (@id,_contractId,_customerId,@featureId,featureActionId);
            END IF;
			ITERATE  getAction;
        END IF;
END LOOP getAction;
CLOSE actions;

END IF;

END