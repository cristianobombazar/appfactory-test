package com.kony.sbg.postprocessor;

import com.kony.dbputilities.util.ErrorCodeEnum;
import com.kony.sbg.util.SbgErrorCodeEnum;
import com.konylabs.middleware.common.DataPostProcessor2;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.controller.DataControllerResponse;
import com.konylabs.middleware.dataobject.Result;
import com.konylabs.middleware.dataobject.ResultToJSON;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class DocumentMalwareScanPostProcessor implements DataPostProcessor2 {

    private static final Logger logger = LogManager.getLogger(DocumentMalwareScanPostProcessor.class);

    @Override
    public Object execute(Result result, DataControllerRequest dataControllerRequest, DataControllerResponse dataControllerResponse) throws Exception {

        logger.debug("#################### DocumentMalwareScanPostProcessor : BEGIN");

        JSONObject constructedNewJsonObj = new JSONObject();
        Result resultNewResponse = new Result();
        String jsonDocStrResponse = ResultToJSON.convert(result);
        logger.debug("#################### DocumentMalwareScanPostProcessor json request :" + jsonDocStrResponse);


        try {
            if (StringUtils.isNotBlank(jsonDocStrResponse)) {
                JSONObject jsonObj = new JSONObject(jsonDocStrResponse);
                String statusmg = jsonObj.getString("statusmessage");

                if (statusmg.equalsIgnoreCase("Successful")) {
                    constructedNewJsonObj.put("hasmalware", "false");
                    constructedNewJsonObj.put("opstatus", 0);
                    constructedNewJsonObj.put("httpStatusCode", 200);
                } else {
                    constructedNewJsonObj = getFailureResponse();
                }
                logger.debug("#################### DocumentMalwareScanPostProcessor : constructedNewJsonObj: " + constructedNewJsonObj);

                resultNewResponse.appendJson(constructedNewJsonObj.toString());

                return resultNewResponse;
            } else {
                logger.debug("Exception occured in DocumentMalwareScanPostProcessor: ");
                String failureResponse = getFailureResponse().toString();
                resultNewResponse.appendJson(failureResponse);
                return resultNewResponse;
            }

        } catch (JSONException exception) {
            logger.debug("JSONException occured in DocumentMalwareScanPostProcessor: result in json" + jsonDocStrResponse);
            logger.debug("JSONException occured in DocumentMalwareScanPostProcessor: ", exception);
            String failureResponse = getFailureResponse().toString();
            resultNewResponse.appendJson(failureResponse);
            return resultNewResponse;
        } catch (Exception exception) {
            logger.debug("General Exception occured in DocumentMalwareScanPostProcessor: ", exception);
            logger.debug("JSONException occured in DocumentMalwareScanPostProcessor: ", exception);
            String failureResponse = getFailureResponse().toString();
            resultNewResponse.appendJson(failureResponse);
            return resultNewResponse;
        }
    }

    private JSONObject getFailureResponse() {
        JSONObject constructedNewJsonObj = new JSONObject();
        constructedNewJsonObj.put("hasmalware", "true");
        constructedNewJsonObj.put("opstatus", ErrorCodeEnum.ERR_10050.getErrorCode());
        logger.debug("#################### DocumentMalwareScanPostProcessor : getFailureResponse resp: " + constructedNewJsonObj);
        return constructedNewJsonObj;
    }
}
