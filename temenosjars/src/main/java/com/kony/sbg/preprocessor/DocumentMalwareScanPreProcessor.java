package com.kony.sbg.preprocessor;

import com.infinity.dbx.temenos.auth.AuthenticationWithoutSession;
import com.kony.dbputilities.util.CommonUtils;
import com.kony.sbg.javaservices.FetchPingToken;
import com.kony.sbg.util.SBGCommonUtils;
import com.kony.sbg.util.SBGUtil;
import com.kony.sbg.util.SbgURLConstants;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.controller.DataControllerResponse;
import com.konylabs.middleware.dataobject.Result;
import org.apache.log4j.Logger;

import java.util.HashMap;

public class DocumentMalwareScanPreProcessor extends SbgBasePreProcessor {
    private static final Logger logger = Logger.getLogger(DocumentMalwareScanPreProcessor.class);

    @Override
    public boolean execute(@SuppressWarnings("rawtypes") HashMap params, DataControllerRequest request,
                           DataControllerResponse response, Result result) throws Exception {
        try {
            String authToken = FetchPingToken.getB2BAccessToken(request);
            logger.debug("######## DocumentMalwareScanPreProcessor authToken:" + authToken);
            request.addRequestParam_("Authorization", authToken);
            request.addRequestParam_("x-fapi-interaction-id", SBGCommonUtils.getServerPropertyValue("PING_CLIENT_ID", request));
            request.addRequestParam_("X-IBM-Client-Id", SBGCommonUtils.getServerPropertyValue("X-IBM-CLIENT-ID", request));
            request.addRequestParam_("X-IBM-Client-Secret", SBGCommonUtils.getServerPropertyValue("X-IBM-CLIENT-SECRET", request));

        } catch (Exception e) {
            logger.error("###### DocumentMalwareScanPreProcessor failed :", e);
        }
        return true;
    }
}